{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lunr-core","text":"<p>A port of lunr.js to .NET Core. Lunr is a bit like Solr, but much smaller and not as bright.</p> <p></p>"},{"location":"#todo-up-for-grabs","title":"TODO / up for grabs","text":"<ul> <li>Multilingual support (lunr has optional support that remains to be ported)</li> <li>Documentation (adapted from lunr docs)</li> </ul>"},{"location":"#example","title":"Example","text":"<p>A very simple search index can be created using the following:</p> <pre><code>var index = await Index.Build(async builder =&gt;\n{\nbuilder\n.AddField(\"title\")\n.AddField(\"body\");\n\nawait builder.Add(new Document\n{\n{ \"title\", \"Twelfth-Night\" },\n{ \"body\", \"If music be the food of love, play on: Give me excess of it\u2026\" },\n{ \"author\", \"William Shakespeare\" },\n{ \"id\", \"1\" },\n});\n});\n</code></pre> <p>Then searching is as simple as:</p> <pre><code>await foreach (Result result in index.Search(\"love\"))\n{\n// do something with that result\n}\n</code></pre> <p>This returns a list of matching documents with a score of how closely they match, the search query as well as any associated metadata about the match:</p> <pre><code>new List&lt;Result&gt;\n{\nnew Result(\ndocumentReference: \"1\",\nscore: 0.3535533905932737,\nmatchData: new MatchData(\nterm: \"love\",\nfield: \"body\"\n)\n)\n}\n</code></pre>"},{"location":"#description","title":"Description","text":"<p>Lunr-core is a small, full-text search library for use in small applications. It indexes documents and provides a simple search interface for retrieving documents that best match text queries. It is 100% compatible with lunr.js, meaning that an index file prepared on the server with lunr-core can be used on the client using lunr.js.</p>"},{"location":"#why","title":"Why","text":"<p>Lunr-core is suitable for small applications that require a simple search engine but without the overhead of a full-scale search engine such as Lucene. Its compatibility with lunr.js also opens up some interesting client-side search scenarios.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Soon: Full text search support for 14 languages</li> <li>Boost terms at query time or boost entire documents at index time</li> <li>Scope searches to specific fields</li> <li>Fuzzy term matching with wildcards or edit distance</li> <li>No runtime dependencies beyond SDK, BCL AsyncInterfaces and System.Text.Json</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Original code by Oliver Nightingale and contributors, ported to .NET Core by Bertrand Le Roy.</li> <li>Icon adapted from https://commons.wikimedia.org/wiki/File:Internal_Structure_of_the_Moon.JPG by Iqbal Mahmud under Creative Commons Attribution Share Alike 4.0 International.</li> <li>Perf tests use a word list by Sindre Sorhus.</li> </ul>"},{"location":"getting-started/","title":"Getting started with lunr-core","text":"<p>In this article, we are going to see ...</p>"}]}